plugins {
    id 'java'
    id 'jacoco'
    id "org.jetbrains.kotlin.jvm" version "1.2.71"
    id "org.jetbrains.dokka" version "0.9.16"
    id "com.bmuschko.nexus" version "2.3.1"
    id "io.codearte.nexus-staging" version "0.12.0"
}

allprojects {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/spekframework/spek-dev" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 10, 'minutes'
        }
    }
}

ext.nexusUsername = properties.'ossrhUsername' as String ?: 'Foo'
ext.nexusPassword = properties.'ossrhPassword' as String ?: 'Foo'

// Dokka aggregation
dokka {
    moduleName = "$rootProject.name"
    outputDirectory = "$rootDir/docs/api"
    outputFormat = "html"
    jdkVersion = 8

    doFirst {
        sourceDirs = files(subprojects.collect { it.sourceSets.main.allSource.srcDirs })
        file(outputDirectory).deleteDir()
    }
    
    includes = ["**/overview.md"]
}

// Test Report Aggregation
task aggregateTestReport(type: JacocoReport) {
    sourceDirectories = files()
    classDirectories = files()
    executionData = files()

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }

    doFirst {
        subprojects.findAll { subproject ->
            subproject.pluginManager.hasPlugin('java')
        }.each { subproject ->
            additionalSourceDirs files((Set<File>) subproject.sourceSets.main.allJava.srcDirs)
            additionalClassDirs ((FileCollection) subproject.sourceSets.main.output)
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                executionData subproject.tasks.jacocoTestReport.executionData
            }
        }

        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}